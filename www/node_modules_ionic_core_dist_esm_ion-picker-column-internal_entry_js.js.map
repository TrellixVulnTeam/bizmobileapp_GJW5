{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAC6G;AAChD;AACS;AACiD;AACzD;AAC9D;AACA,0CAA0C,kBAAkB,mBAAmB,gBAAgB,mBAAmB,aAAa,aAAa,eAAe,qCAAqC,iCAAiC,6BAA6B,kBAAkB,kBAAkB,qBAAqB,kBAAkB,+FAA+F,MAAM,mBAAmB,oBAAoB,2BAA2B,0BAA0B,yBAAyB,yBAAyB,yBAAyB,aAAa,mBAAmB,YAAY,iBAAiB,uBAAuB,mBAAmB,gBAAgB,yBAAyB,yBAAyB,uBAAuB,6DAA6D,4BAA4B,0BAA0B,cAAc,aAAa,iDAAiD;AACp9B;AACA,yCAAyC,kBAAkB,mBAAmB,gBAAgB,mBAAmB,aAAa,aAAa,eAAe,qCAAqC,iCAAiC,6BAA6B,kBAAkB,kBAAkB,qBAAqB,kBAAkB,+FAA+F,MAAM,mBAAmB,oBAAoB,2BAA2B,0BAA0B,yBAAyB,yBAAyB,yBAAyB,aAAa,mBAAmB,YAAY,iBAAiB,uBAAuB,mBAAmB,gBAAgB,yBAAyB,yBAAyB,uBAAuB,6DAA6D,4BAA4B,0BAA0B,cAAc,aAAa,iDAAiD,0BAA0B,4BAA4B;AACzgC;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,qBAAqB,qDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,QAAQ,uDAAG;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sDAAkB;AAChC;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,MAAM,uDAAG;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAc,4BAA4B,kBAAkB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uDAAc,oDAAoD,WAAW;AACxF;AACA;AACA,YAAY,uCAAuC;AACnD,iBAAiB,4DAAU;AAC3B,YAAY,qDAAC,CAAC,iDAAI,IAAI,oBAAoB,qDAAkB;AAC5D;AACA;AACA;AACA,OAAO,GAAG,EAAE,qDAAC,UAAU,wCAAwC,aAAa,qDAAC,UAAU,wCAAwC,aAAa,qDAAC,UAAU,wCAAwC;AAC/L,cAAc,qDAAC,UAAU;AACzB;AACA,WAAW;AACX,KAAK,GAAG,qDAAC,UAAU,wCAAwC,aAAa,qDAAC,UAAU,wCAAwC,aAAa,qDAAC,UAAU,wCAAwC;AAC3L;AACA,aAAa,OAAO,qDAAU;AAC9B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8D","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-06cd27b1.js';\r\nimport { b as getIonMode } from './ionic-global-a049bcbf.js';\r\nimport { r as raf, g as getElementRoot } from './helpers-eed79a2b.js';\r\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-9a9aa7ec.js';\r\nimport { c as createColorClasses } from './theme-a24ff1ad.js';\r\n\r\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\r\n\r\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\r\n\r\nlet PickerColumnInternal = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    this.hapticsStarted = false;\r\n    this.isColumnVisible = false;\r\n    this.isActive = false;\r\n    /**\r\n     * A list of options to be displayed in the picker\r\n     */\r\n    this.items = [];\r\n    /**\r\n     * The color to use from your application's color palette.\r\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\r\n     * For more information on colors, see [theming](/docs/theming/basics).\r\n     */\r\n    this.color = 'primary';\r\n    /**\r\n     * If `true`, tapping the picker will\r\n     * reveal a number input keyboard that lets\r\n     * the user type in values for each picker\r\n     * column. This is useful when working\r\n     * with time pickers.\r\n     *\r\n     * @internal\r\n     */\r\n    this.numericInput = false;\r\n    this.centerPickerItemInView = (target, smooth = true) => {\r\n      this.el.scroll({\r\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\r\n        top: target.offsetTop - (3 * target.clientHeight) + (target.clientHeight / 2),\r\n        left: 0,\r\n        behavior: smooth ? 'smooth' : undefined\r\n      });\r\n    };\r\n    /**\r\n     * When ionInputModeChange is emitted, each column\r\n     * needs to check if it is the one being made available\r\n     * for text entry.\r\n     */\r\n    this.inputModeChange = (ev) => {\r\n      if (!this.numericInput) {\r\n        return;\r\n      }\r\n      const { useInputMode, inputModeColumn } = ev.detail;\r\n      /**\r\n       * If inputModeColumn is undefined then this means\r\n       * all numericInput columns are being selected.\r\n       */\r\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\r\n      if (!useInputMode || !isColumnActive) {\r\n        this.isActive = false;\r\n        return;\r\n      }\r\n      this.isActive = true;\r\n    };\r\n    /**\r\n     * When the column scrolls, the component\r\n     * needs to determine which item is centered\r\n     * in the view and will emit an ionChange with\r\n     * the item object.\r\n     */\r\n    this.initializeScrollListener = () => {\r\n      const { el } = this;\r\n      let timeout;\r\n      let activeEl = this.activeItem;\r\n      const scrollCallback = () => {\r\n        raf(() => {\r\n          if (timeout) {\r\n            clearTimeout(timeout);\r\n            timeout = undefined;\r\n          }\r\n          if (!this.hapticsStarted) {\r\n            hapticSelectionStart();\r\n            this.hapticsStarted = true;\r\n          }\r\n          /**\r\n           * Select item in the center of the column\r\n           * which is the month/year that we want to select\r\n           */\r\n          const bbox = el.getBoundingClientRect();\r\n          const centerX = bbox.x + (bbox.width / 2);\r\n          const centerY = bbox.y + (bbox.height / 2);\r\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\r\n          if (activeEl !== null) {\r\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\r\n          }\r\n          /**\r\n           * If we are selecting a new value,\r\n           * we need to run haptics again.\r\n           */\r\n          if (activeElement !== activeEl) {\r\n            hapticSelectionChanged();\r\n          }\r\n          activeEl = activeElement;\r\n          activeElement.classList.add(PICKER_COL_ACTIVE);\r\n          timeout = setTimeout(() => {\r\n            const dataIndex = activeElement.getAttribute('data-index');\r\n            /**\r\n             * If no value it is\r\n             * possible we hit one of the\r\n             * empty padding columns.\r\n             */\r\n            if (dataIndex === null) {\r\n              return;\r\n            }\r\n            const index = parseInt(dataIndex, 10);\r\n            const selectedItem = this.items[index];\r\n            if (selectedItem.value !== this.value) {\r\n              this.value = selectedItem.value;\r\n              hapticSelectionEnd();\r\n              this.hapticsStarted = false;\r\n            }\r\n          }, 250);\r\n        });\r\n      };\r\n      /**\r\n       * Wrap this in an raf so that the scroll callback\r\n       * does not fire when component is initially shown.\r\n       */\r\n      raf(() => {\r\n        el.addEventListener('scroll', scrollCallback);\r\n        this.destroyScrollListener = () => {\r\n          el.removeEventListener('scroll', scrollCallback);\r\n        };\r\n      });\r\n    };\r\n  }\r\n  valueChange() {\r\n    if (this.isColumnVisible) {\r\n      /**\r\n       * Only scroll the active item into view and emit the value\r\n       * change, when the picker column is actively visible to the user.\r\n       */\r\n      const { items, value } = this;\r\n      this.scrollActiveItemIntoView();\r\n      const findItem = items.find(item => item.value === value);\r\n      if (findItem) {\r\n        this.ionChange.emit(findItem);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Only setup scroll listeners\r\n   * when the picker is visible, otherwise\r\n   * the container will have a scroll\r\n   * height of 0px.\r\n   */\r\n  componentWillLoad() {\r\n    const visibleCallback = (entries) => {\r\n      var _a;\r\n      const ev = entries[0];\r\n      if (ev.isIntersecting) {\r\n        /**\r\n         * Because this initial call to scrollActiveItemIntoView has to fire before\r\n         * the scroll listener is set up, we need to manage the active class manually.\r\n         */\r\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\r\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\r\n        this.scrollActiveItemIntoView();\r\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\r\n        this.initializeScrollListener();\r\n        this.isColumnVisible = true;\r\n      }\r\n      else {\r\n        if (this.destroyScrollListener) {\r\n          this.destroyScrollListener();\r\n          this.destroyScrollListener = undefined;\r\n        }\r\n        this.isColumnVisible = false;\r\n      }\r\n    };\r\n    new IntersectionObserver(visibleCallback, { threshold: 0.01 }).observe(this.el);\r\n    const parentEl = this.el.closest('ion-picker-internal');\r\n    if (parentEl !== null) {\r\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\r\n    }\r\n  }\r\n  scrollActiveItemIntoView() {\r\n    const activeEl = this.activeItem;\r\n    if (activeEl) {\r\n      this.centerPickerItemInView(activeEl, false);\r\n    }\r\n  }\r\n  get activeItem() {\r\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]`);\r\n  }\r\n  render() {\r\n    const { items, color, isActive, numericInput } = this;\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\r\n        [mode]: true,\r\n        ['picker-column-active']: isActive,\r\n        ['picker-column-numeric-input']: numericInput\r\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\r\n      return (h(\"div\", { class: \"picker-item\", \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\r\n          this.centerPickerItemInView(ev.target);\r\n        } }, item.text));\r\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"value\": [\"valueChange\"]\r\n  }; }\r\n};\r\nconst PICKER_COL_ACTIVE = 'picker-item-active';\r\nPickerColumnInternal.style = {\r\n  ios: pickerColumnInternalIosCss,\r\n  md: pickerColumnInternalMdCss\r\n};\r\n\r\nexport { PickerColumnInternal as ion_picker_column_internal };\r\n"],"names":[],"sourceRoot":"webpack:///"}